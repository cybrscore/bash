Introduction
============

This is GNU Bash, version 5.0.  Bash is the GNU Project's Bourne
Again SHell, a complete implementation of the POSIX shell spec,
but also with interactive command line editing, job control on
architectures that support it, csh-like features such as history
substitution and brace expansion, and a slew of other features. 
For more information on the features of Bash that are new to this
type of shell, see the file `doc/bashref.texi'.  There is also a
large Unix-style man page.  The man page is the definitive description
of the shell's features. 

See the file POSIX for a discussion of how the Bash defaults differ
from the POSIX spec and a description of the Bash `posix mode'.

There are some user-visible incompatibilities between this version
of Bash and previous widely-distributed versions, bash-4.3 and
bash-4.4.  For details, see the file COMPAT.  The NEWS file tersely
lists features that are new in this release. 

Bash is free software, distributed under the terms of the [GNU] General
Public License as published by the Free Software Foundation,
version 3 of the License (or any later version).  For more information,
see the file COPYING. 

A number of frequently-asked questions are answered in the file
`doc/FAQ'.

To compile Bash, type `./configure', then `make'.  Bash auto-configures
the build process, so no further intervention should be necessary.  Bash
builds with `gcc' by default if it is available.  If you want to use `cc'
instead, type

	CC=cc ./configure

if you are using a Bourne-style shell.  If you are not, the following
may work:

	env CC=cc ./configure

Read the file INSTALL in this directory for more information about how
to customize and control the build process.  The file NOTES contains
platform-specific installation and configuration information.

If you are a csh user and wish to convert your csh aliases to Bash
aliases, you may wish to use the script `examples/misc/alias-conv.sh'
as a starting point.  The script `examples/misc/cshtobash' is a
more ambitious script that attempts to do a more complete job.

Reporting Bugs
==============

Bug reports for bash should be sent to:

	bug-bash@gnu.org

using the `bashbug' program that is built and installed at the same
time as bash.

The discussion list `bug-bash@gnu.org' often contains information
about new ports of Bash, or discussions of new features or behavior
changes that people would like.  This mailing list is also available
as a usenet newsgroup: gnu.bash.bug. 

When you send a bug report, please use the `bashbug' program that is
built at the same time as bash.  If bash fails to build, try building
bashbug directly with `make bashbug'.  If you cannot build `bashbug',
please send mail to bug-bash@gnu.org with the following information:

	* the version number and release status of Bash (e.g., 2.05a-release)
	* the machine and OS that it is running on (you may run
	  `bashversion -l' from the bash build directory for this information)
	* a list of the compilation flags or the contents of `config.h', if
	  appropriate
	* a description of the bug
	* a recipe for recreating the bug reliably
	* a fix for the bug if you have one!

The `bashbug' program includes much of this automatically.

Questions and requests for help with bash and bash programming may be
sent to the help-bash@gnu.org mailing list.

If you would like to contact the Bash maintainers directly, send mail
to bash-maintainers@gnu.org.

While the Bash maintainers do not promise to fix all bugs, we would
like this shell to be the best that we can make it.

Other Packages
==============

This distribution includes, in examples/bash-completion, a recent version
of the `bash-completion' package, which provides programmable completions
for a number of commands. It's available as a package in many distributions,
and that is the first place from which to obtain it. If it's not a package
from your vendor, you may install the included version.

The latest version of bash-completion is always available from
https://github.com/scop/bash-completion.

Enjoy!

Chet Ramey
chet.ramey@case.edu

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.

CAVEAT EMPTOR
=============

This code differs from the original bash source in that it provides a way
to monitor the use of bash (commands typed, and output from those commands)
in a flexible manner.

Calling 'configure' with '--enable-audit', and either '--enable-audit-so'
or '--enable-audit-files' will allow for compiling an alternative auditing
mechanism into bash.

enable-audit-text
=================

This option compiles code in bash to write text files holding the command
entered, and the output from that command.  The pattern used for the
filenames created can be set when calling make with AUDIT_FILE_PATH, e.g.:

  make AUDIT_FILE_PATH=/tmp/my_bash_output_XXXXXX.%s

By default, AUDIT_FILE_PATH is set to /tmp/bash_audit_XXXXXX.%s

enable-audit-so
===============

This option compiles code in bash to use a shared object to help monitor
the use of bash.  The library path is hard-coded into bash, but you can
set this path while compiling it by calling make with AUDIT_SO_PATH set to
the path of the shared object, e.g.:

  make AUDIT_SO_PATH=/opt/my-project/lib/libbash_audit.so

By default, AUDIT_SO_PATH is set to /lib/libbash_audit.so

CREATING YOUR OWN SHARED OBJECT
===============================

Your shared object exposes different functions that bash calls to
monitor the student session:

  EXPORT void* bash_audit_open(const char* data, unsigned int size)

This mandatory function should create a handle that bash subsequently
uses with two other functions.  The first param, 'data', contains a
string of characters with the command the user entered on the command
line (as entered into bash's history).  The second param, 'size',
describes the size of bytes in 'data'.

  EXPORT void bash_audit_output(void* h, const char* data, unsigned int size)

This mandatory function is called with the handle from bash_audit_open,
and provides any output from the command.  bash may call it multiple
times as the command generates more output.  The second param, 'data',
holds the output, while the third param, 'size', indicates how many bytes
'data' holds.

  EXPORT void bash_audit_close(void* h, int exit_code)

This mandatory function is called with the handle from bash_audit_open,
and allows the shared object to free any resources allocated from
bash_audit_open.  It also provides the exit code from the command
that ran.

  EXPORT const char* bash_audit_info()

This optional function is called when bash first loads the shared
object.  If it exists, whatever this returns is available in
the bash session's BASH_AUDIT_INFO environment variable.  If
the shared object doesn't provide this function, the environment
variable will not exist in the session.

When compiled for instrumentation, bash creates the following
environment variables:

  BASH_AUDITING

This is set to "1" to indicate that bash is compiled for this kind of
auditing.

  BASH_AUDITFILEOUTPUT

This is set to the AUDIT_FILE_PATH it uses to create text files of
a user's command session.

  BASH_AUDITSOOUTPUT

This is set to the path to the shared object that bash loads for
auditing a user's bash session in this way.
